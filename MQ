ONEWAY COMMUNICATION
dspmq ->for display list of qmanager
dltmqm VAMSI ->for delet
crtmqm VAMSI -> for create                                                                          crtmqm KATTA -> for create
strmqm VAMSI -> for start                                                                           strmqm KATTA -> for start                                                                           
runmqsc VAMSI -> for run                                                                            runmqsc KATTA -> for run                                                            
SENDER:   VAMSI                                                                                             RESIVER: KATTA
DEFINE QLOCAL(V) USAGE(XMITQ))                                                                      DEFINE QLOCAL(K.L)
DEFINE QREMOTE(V.TO.K) RQMNAME(KATTA) RNAME(K.L) XMITQ(V)                                           DEFINE LISTENER(KL) TRPTYPE(TCP) PORT(1414)
DEFINE CHANNEL(K.C) CHLTYPE(SDR) CONNAME('192.168.3.51(1414)') XMITQ(v)                             DEFINE CHANNEL(K.C) CHLTYPE(RCVR) TRPTYPE(TCP)
START CHANNEL(K.C)                                                                                  START LISTENER(KL)
DISPLAY CHSTATUS(K.C)                                                                               DISPLAY LSSTATUS(KL)
Then go to the path /opt/mqm/samp/bin/ to send and resive message
./amqsput qremort_name qmanagername ->send message ex:./amqsput V.TO.K VAMSI
./amqsget qlocal_name qmanagername ->resive message ex:./amqsget K.L KATTA
 
TWOWAY COMMUNICATION :replace same process on two sides 
TRIGGER: it should be applied to sender channel for both two way
ALTER QLOCAL(V) TRIGGER TRIGTYPE(EVERY) TRIGDATA(#sender channel name (K.C)) INITQ(SYSTEM.CHANNEL.INITQ)
ALTER CHANNEL(K.C) CHLTYPE(SDR) DISCINT(20) ->Disconnection Interval
STOP CHANNEL(K.C)
START CHANNEL(K.C)
DISPLAY CHSTATUS(K.C)
then send the messages and check the status.

SSL:
DISPLAY QMGR
ALTER QMGR SSLEV(ENABLED)
/opt/mqm/java/jre64/jre/bin/ run ./ikeymen
KEY DATABASE TYPE :CMS
FILE NAME:key.kdb
LOCATION:/var/mqm/qmgrs/B/ssl ->browse
ok
PASSWORD:XXXXXX
CONFORM PASSWORD:XXXX
ON STASH PASSWORD TO FILE 
ok
click on NEW SELF-SIGN
KEY LABEL:ibmwebspheremqb(b-qmanager name)
ok
click on EXTRACT CIRTIFICATE
change name of aram file as qmanager_name.arm(b.arm)
ok
DO THE SAME PROCESS IN ANOTHER IMAGE 

transfer arm files 
then SELECT SIGNER CERTIFICATE -> add -> transfered file(b.arm) -> lablename (ibmwebspheremqb)
DO the same process in second image

excute command for both sender and resiver channels in two images
ALTER CHANNEL(A.C) CHLTYPE(SDR) SSLCIPH(TLS_RSA_WITH_AES_256_CBC_SHA256)
ALTER CHANNEL(B.C) CHLTYPE(RCVR) SSLCIPH(TLS_RSA_WITH_AES_256_CBC_SHA256)
STOP CHANNEL(A.C) -> stop sender channel only
START CHANNEL(A.C)
REFRESH SECURITY TYPE(SSL)

MULTI-INSTANCE
SERVER -1
go to root 'su'
  |
yum install nfs* -y
   |
mkdir EIDIKO
   |
cd /var/EIDIKO
   |
mkdir qmgrs
   |
mkdir logs
   |
chmod -R 777 EIDIKO
   |
chown -R mqm:mqm EIDIKO
   |
vi /etc/exports
   |
/var/EIDIKO *(rw,sync,no,wdelay,frid=0)
    |
   wq!
    |
exportfs -va
    |
systemctl start nfs*
    |
system status nfs*
    |
systemctl status nfs.service
    |
  su mqm
    |
crtmqm -ld /var/EIDIKO/logs -md /var/EIDIKO/qmgrs NEW
    |
 dspmqinf -o command WAS
    |
strmqm -x NEW
    |
endmqm -s NEW

SERVER 2

go to root 'su'
  |
yum install nfs* -y
   |
mkdir EIDIKO
   |
cd /var/EIDIKO
   |
mkdir qmgrs
   |
mkdir logs
   |
chmod -R 777 EIDIKO
   |
chown -R mqm:mqm EIDIKO 
   |
mount -t nfs4 -o hard,intr 192.168.2.134:/ /var/EIDIKO
   du -h
   |
su - mqm
   |
past line executed from the server 1 command  (dspmqinf -o command WAS)
   |
strmqm -x NEW
    |
endmqm -s NEW


    






